// Code generated by mockery v2.47.0. DO NOT EDIT.

package repo

import (
	context "context"
	models "device-readings/internal/readings/models"

	mock "github.com/stretchr/testify/mock"
)

// MockDB is an autogenerated mock type for the DB type
type MockDB struct {
	mock.Mock
}

type MockDB_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDB) EXPECT() *MockDB_Expecter {
	return &MockDB_Expecter{mock: &_m.Mock}
}

// GetReadings provides a mock function with given fields: ctx, filters
func (_m *MockDB) GetReadings(ctx context.Context, filters Filters) ([]models.Reading, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetReadings")
	}

	var r0 []models.Reading
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Filters) ([]models.Reading, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Filters) []models.Reading); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Reading)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, Filters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDB_GetReadings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReadings'
type MockDB_GetReadings_Call struct {
	*mock.Call
}

// GetReadings is a helper method to define mock.On call
//   - ctx context.Context
//   - filters Filters
func (_e *MockDB_Expecter) GetReadings(ctx interface{}, filters interface{}) *MockDB_GetReadings_Call {
	return &MockDB_GetReadings_Call{Call: _e.mock.On("GetReadings", ctx, filters)}
}

func (_c *MockDB_GetReadings_Call) Run(run func(ctx context.Context, filters Filters)) *MockDB_GetReadings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Filters))
	})
	return _c
}

func (_c *MockDB_GetReadings_Call) Return(_a0 []models.Reading, _a1 error) *MockDB_GetReadings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDB_GetReadings_Call) RunAndReturn(run func(context.Context, Filters) ([]models.Reading, error)) *MockDB_GetReadings_Call {
	_c.Call.Return(run)
	return _c
}

// GetReadingsByDevice provides a mock function with given fields: ctx, deviceID
func (_m *MockDB) GetReadingsByDevice(ctx context.Context, deviceID string) ([]models.Reading, error) {
	ret := _m.Called(ctx, deviceID)

	if len(ret) == 0 {
		panic("no return value specified for GetReadingsByDevice")
	}

	var r0 []models.Reading
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Reading, error)); ok {
		return rf(ctx, deviceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Reading); ok {
		r0 = rf(ctx, deviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Reading)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDB_GetReadingsByDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReadingsByDevice'
type MockDB_GetReadingsByDevice_Call struct {
	*mock.Call
}

// GetReadingsByDevice is a helper method to define mock.On call
//   - ctx context.Context
//   - deviceID string
func (_e *MockDB_Expecter) GetReadingsByDevice(ctx interface{}, deviceID interface{}) *MockDB_GetReadingsByDevice_Call {
	return &MockDB_GetReadingsByDevice_Call{Call: _e.mock.On("GetReadingsByDevice", ctx, deviceID)}
}

func (_c *MockDB_GetReadingsByDevice_Call) Run(run func(ctx context.Context, deviceID string)) *MockDB_GetReadingsByDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDB_GetReadingsByDevice_Call) Return(_a0 []models.Reading, _a1 error) *MockDB_GetReadingsByDevice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDB_GetReadingsByDevice_Call) RunAndReturn(run func(context.Context, string) ([]models.Reading, error)) *MockDB_GetReadingsByDevice_Call {
	_c.Call.Return(run)
	return _c
}

// StoreReadings provides a mock function with given fields: readings
func (_m *MockDB) StoreReadings(readings []models.Reading) (StoreReadingsResult, error) {
	ret := _m.Called(readings)

	if len(ret) == 0 {
		panic("no return value specified for StoreReadings")
	}

	var r0 StoreReadingsResult
	var r1 error
	if rf, ok := ret.Get(0).(func([]models.Reading) (StoreReadingsResult, error)); ok {
		return rf(readings)
	}
	if rf, ok := ret.Get(0).(func([]models.Reading) StoreReadingsResult); ok {
		r0 = rf(readings)
	} else {
		r0 = ret.Get(0).(StoreReadingsResult)
	}

	if rf, ok := ret.Get(1).(func([]models.Reading) error); ok {
		r1 = rf(readings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDB_StoreReadings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreReadings'
type MockDB_StoreReadings_Call struct {
	*mock.Call
}

// StoreReadings is a helper method to define mock.On call
//   - readings []models.Reading
func (_e *MockDB_Expecter) StoreReadings(readings interface{}) *MockDB_StoreReadings_Call {
	return &MockDB_StoreReadings_Call{Call: _e.mock.On("StoreReadings", readings)}
}

func (_c *MockDB_StoreReadings_Call) Run(run func(readings []models.Reading)) *MockDB_StoreReadings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]models.Reading))
	})
	return _c
}

func (_c *MockDB_StoreReadings_Call) Return(_a0 StoreReadingsResult, _a1 error) *MockDB_StoreReadings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDB_StoreReadings_Call) RunAndReturn(run func([]models.Reading) (StoreReadingsResult, error)) *MockDB_StoreReadings_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDB creates a new instance of MockDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDB {
	mock := &MockDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
