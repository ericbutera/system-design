// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CreateReservationInput struct {
	GuestName    string   `json:"guestName"`
	GuestEmail   string   `json:"guestEmail"`
	CheckInDate  string   `json:"checkInDate"`
	CheckOutDate string   `json:"checkOutDate"`
	RoomType     RoomType `json:"roomType"`
	HotelID      int      `json:"hotelId"`
	Quantity     int      `json:"quantity"`
}

type Guest struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
	Phone string `json:"phone"`
}

type Mutation struct {
}

type Payment struct {
	ID       string  `json:"id"`
	Amount   float64 `json:"amount"`
	Currency string  `json:"currency"`
	Status   string  `json:"status"`
}

type Query struct {
}

type Reservation struct {
	ID         string   `json:"id"`
	Quantity   int      `json:"quantity"`
	CheckIn    string   `json:"checkIn"`
	CheckOut   string   `json:"checkOut"`
	Status     string   `json:"status"`
	RoomTypeID int      `json:"roomTypeId"`
	HotelID    int      `json:"hotelId"`
	PaymentID  int      `json:"paymentId"`
	GuestID    int      `json:"guestId"`
	RoomType   string   `json:"roomType"`
	Guest      *Guest   `json:"guest"`
	Payment    *Payment `json:"payment,omitempty"`
	CreatedAt  string   `json:"createdAt"`
}

type RoomType string

const (
	RoomTypeSingle    RoomType = "SINGLE"
	RoomTypeDouble    RoomType = "DOUBLE"
	RoomTypeSuite     RoomType = "SUITE"
	RoomTypePenthouse RoomType = "PENTHOUSE"
)

var AllRoomType = []RoomType{
	RoomTypeSingle,
	RoomTypeDouble,
	RoomTypeSuite,
	RoomTypePenthouse,
}

func (e RoomType) IsValid() bool {
	switch e {
	case RoomTypeSingle, RoomTypeDouble, RoomTypeSuite, RoomTypePenthouse:
		return true
	}
	return false
}

func (e RoomType) String() string {
	return string(e)
}

func (e *RoomType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoomType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoomType", str)
	}
	return nil
}

func (e RoomType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
