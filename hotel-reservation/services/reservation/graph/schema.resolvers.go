package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"

	"github.com/ericbutera/system-design/hotel-reservation/services/reservation/graph/auth"
	"github.com/ericbutera/system-design/hotel-reservation/services/reservation/graph/model"
	dbModel "github.com/ericbutera/system-design/hotel-reservation/services/reservation/internal/db/model"
	"github.com/samber/lo"
)

// CreateReservation is the resolver for the createReservation field.
func (r *mutationResolver) CreateReservation(ctx context.Context, input model.CreateReservationInput) (*model.Reservation, error) {
	panic(fmt.Errorf("not implemented: CreateReservation - createReservation"))
}

// CancelReservation is the resolver for the cancelReservation field.
func (r *mutationResolver) CancelReservation(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: CancelReservation - cancelReservation"))
}

// ViewReservation is the resolver for the viewReservation field.
func (r *queryResolver) ViewReservation(ctx context.Context, id string) (*model.Reservation, error) {
	return &model.Reservation{
		ID: "1",
	}, nil
}

// ViewReservations is the resolver for the viewReservations field.
func (r *queryResolver) ViewReservations(ctx context.Context) ([]*model.Reservation, error) {
	var data []*dbModel.Reservation
	user := auth.ForContext(ctx)
	res := r.DB.Where("guest_id = ?", user.ID).
		Find(&data)

	if res.Error != nil {
		return nil, res.Error
	}

	results := make([]*model.Reservation, len(data))
	for i, row := range data {
		results[i] = &model.Reservation{
			ID:         fmt.Sprintf("%d", row.ID),
			CheckIn:    row.CheckIn.Format("2006-01-02"),
			CheckOut:   row.CheckOut.Format("2006-01-02"),
			Status:     row.Status,
			Quantity:   row.Quantity,
			RoomTypeID: row.RoomTypeID,
			HotelID:    row.HotelID,
			PaymentID:  lo.FromPtr(row.PaymentID),
			GuestID:    row.GuestID,
		}
	}

	return results, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
